name: Release
on:
  push:
    tags:
      - "v*"  # 只在推送v开头的tag时触发
  workflow_dispatch:  # 支持手动触发

jobs:
  get-latest-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
      previous_tag: ${{ steps.get-previous-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: get-tag
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # 如果是push触发，使用触发的tag
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # 如果是手动触发，获取分支上最新的tag
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi
      - id: get-previous-tag
        run: |
          CURRENT_TAG=${{ steps.get-tag.outputs.tag }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${CURRENT_TAG}^" || echo '')
          echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

  build:
    needs: get-latest-tag
    strategy:
      fail-fast: true
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        include:
          - goos: linux
            goarch: s390x
          - goos: linux
            goarch: arm64

    name: Build artifacts
    runs-on: ubuntu-latest
    container:
      image: goreleaser/goreleaser-cross:v1.23
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
    steps:
      - run: git config --global --add safe.directory /__w/nezha/nezha
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史

      - name: Fetch all tags
        run: git fetch --force --tags  # 显式获取所有tags

      - name: Fetch IPInfo GeoIP Database
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          rm pkg/geoip/geoip.db
          wget -qO pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${IPINFO_TOKEN}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.x"

      - name: Build
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --single-target --clean --skip=validate

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-${{ env.GOOS }}-${{ env.GOARCH }}
          path: |
            ./dist/*/*

  release:
    runs-on: ubuntu-latest
    needs: [get-latest-tag, build]
    name: Release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets

      - name: Generate Release Body
        id: release_body
        run: |
          CURRENT_TAG=${{ needs.get-latest-tag.outputs.tag }}
          PREVIOUS_TAG=${{ needs.get-latest-tag.outputs.previous_tag }}
          echo "# What's Changed" > release_body.md
          echo "" >> release_body.md
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Full Changelog: [$PREVIOUS_TAG...$CURRENT_TAG](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)" >> release_body.md
          else
            echo "First Release" >> release_body.md
          fi
          echo "" >> release_body.md
          echo "## Changelog" >> release_body.md
          git log --pretty=format:"* %s" $PREVIOUS_TAG..$CURRENT_TAG >> release_body.md

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.get-latest-tag.outputs.tag }}
          artifacts: "assets/*/*/*"
          allowUpdates: true
          makeLatest: true
          replacesArtifacts: true
          generateReleaseNotes: true
          bodyFile: release_body.md

  release-docker:
    runs-on: ubuntu-latest
    needs: [get-latest-tag, build]
    name: Release Docker images
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets

      - name: Fix permissions
        run: |
          chmod -R +x ./assets/*
          mkdir dist
          mv ./assets/*/*/* ./dist

      - name: Extract branch name
        run: |
          export TAG_NAME=$(echo ${GITHUB_REF#refs/tags/})
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Log into GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Login to DockerHub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up image name
        run: |
          GHCR_IMAGE_NAME=$(echo "ghcr.io/${{ github.repository_owner }}/nezha-dashboard" | tr '[:upper:]' '[:lower:]')
          echo "GHCR_IMAGE_NAME=$GHCR_IMAGE_NAME" >> $GITHUB_OUTPUT
          DOCKERHUB_IMAGE_NAME="${{ secrets.DOCKERHUB_USER }}/nezha-dashboard"
          echo "DOCKERHUB_IMAGE_NAME=$DOCKERHUB_IMAGE_NAME" >> $GITHUB_OUTPUT
        id: image-name

      - name: Build dashboard image And Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/s390x
          push: true
          tags: |
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:latest
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:${{ needs.get-latest-tag.outputs.tag }}
            ${{ steps.image-name.outputs.DOCKERHUB_IMAGE_NAME }}:latest
            ${{ steps.image-name.outputs.DOCKERHUB_IMAGE_NAME }}:${{ needs.get-latest-tag.outputs.tag }}